"""
Project Euler Problem 12
========================

The sequence of triangle numbers is generated by adding the natural
numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 =
28. The first ten terms would be:

                 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

   1: 1
   3: 1,3
   6: 1,2,3,6
  10: 1,2,5,10
  15: 1,3,5,15
  21: 1,3,7,21
  28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five
divisors.

What is the value of the first triangle number to have over five hundred
divisors?
"""
def prime_sieve(n):
    is_prime = [True for i in range(n+1)]
    is_prime[0] = False
    is_prime[1] = False
    for i in range(4, n+1, 2):
        is_prime[i] = False
    for i in range(3, int(n**0.5+1), 2):
        if is_prime[i]:
            for j in range(i*i, n+1, i):
                is_prime[j] = False
    return [i for i in range(n+1) if is_prime[i]]

def prime_decomposition(n, sorted_prime_list=[]):
    prime_factors = []
    if n<2:
        return prime_factors
    if sorted_prime_list == []:
        while n >= 2 and n%2 == 0:
            prime_factors.append(2)
            n //= 2
        i = 3
        while i*i <= n:
            if n%i == 0:
                prime_factors.append(i)
                n //= i
            else:
                i += 2
    else:
        i = 0
        while sorted_prime_list[i]**2 <= n:
            if n%sorted_prime_list[i] == 0:
                prime_factors.append(sorted_prime_list[i])
                n //= sorted_prime_list[i]
            else:
                i += 1
    if n > 1:
        prime_factors.append(n)
    return prime_factors

def get_degree(lst):
    degree = {}
    for i in lst:
        degree.update({i:lst.count(i)})
    return degree

def count_factor(prime_degree):
    res = 1
    for p,v in prime_degree.items():
        res *= v+1
    return res


def main():
    i = 1
    n = 0
    while True:
        n += i
        if count_factor(get_degree(prime_decomposition(n))) >= 500:
            break
        i += 1
    print(n)

if __name__ == '__main__':
    main()
